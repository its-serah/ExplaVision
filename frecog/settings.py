"""
Django settings for frecog project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file for secure configuration
# This keeps sensitive information like API keys and secrets out of source control
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# This creates an absolute path to the project directory
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# The secret key is loaded from environment variables for security
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# Debug mode is controlled by an environment variable, defaulting to False
# Debug should be False in production for security reasons
DEBUG = os.getenv("DEBUG", "False") == "True"

# List of host/domain names that this Django site can serve
# Empty list means the site is not accessible to external users
ALLOWED_HOSTS = ["*"]

# Application definition
# List of Django apps enabled in this project
INSTALLED_APPS = [
    # Default Django apps
    "django.contrib.admin",  # Django admin interface
    "django.contrib.auth",  # Authentication system
    "django.contrib.contenttypes",  # Framework for content types
    "django.contrib.sessions",  # Session framework
    "django.contrib.messages",  # Messaging framework
    "django.contrib.staticfiles",  # Static file management
    # Custom apps
    "core.apps.CoreConfig",  # Our main App
    "face.apps.FaceConfig",  # Face recognition App
    # Third-party apps
    "django_extensions",  # Provides additional Django management commands
]

# Authentication settings
LOGIN_URL = "login"  # URL name for the login page
LOGOUT_REDIRECT_URL = "login"  # URL name to redirect after logout
# Custom user model specification
# This allows us to extend the default Django user model with custom fields
AUTH_USER_MODEL = "core.CustomUser"

# Middleware configuration
# Middleware is a framework of hooks for processing requests and responses
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",  # Security-related protections
    "django.contrib.sessions.middleware.SessionMiddleware",  # Session handling
    "django.middleware.common.CommonMiddleware",  # Common functionalities
    "django.middleware.csrf.CsrfViewMiddleware",  # CSRF protection
    "django.contrib.auth.middleware.AuthenticationMiddleware",  # User authentication
    "django.contrib.messages.middleware.MessageMiddleware",  # User messages
    "django.middleware.clickjacking.XFrameOptionsMiddleware",  # Clickjacking protection
]

# Root URL configuration
# Points to the main URL configuration file
ROOT_URLCONF = "frecog.urls"

# Template configuration
# Defines how Django will find and render templates
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",  # Template engine
        "DIRS": [
            BASE_DIR / "templates",  # Look for templates in project-level templates dir
        ],
        "APP_DIRS": True,  # Look for templates in app-level templates dirs
        "OPTIONS": {
            "context_processors": [
                # Context processors add variables to the template context
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI application entry point
# Used for deployment with WSGI servers like gunicorn
WSGI_APPLICATION = "frecog.wsgi.application"


# Database configuration
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {}

# Check if PostgreSQL should be used
USE_POSTGRESQL = os.getenv("USE_POSTGRESQL", "False") == "True"

if USE_POSTGRESQL:
    # PostgreSQL database configuration
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST", "localhost"),
        "PORT": os.getenv("DB_PORT", "5432"),
    }
else:
    # SQLite database configuration
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }


# Password validation
# Password validators enforce password complexity rules
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        # Ensures password is not similar to username or email
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        # Ensures password meets minimum length requirements
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
        # Prevents use of common passwords like "password123"
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
        # Ensures password is not entirely numeric
    },
]


# Internationalization settings
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = "en-us"  # Default language
TIME_ZONE = "UTC"  # Default timezone
USE_I18N = True  # Enable internationalization
USE_TZ = True  # Enable timezone support


# Static files (CSS, JavaScript, Images) configuration
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = "static/"  # URL to use when referring to static files

# Media files configuration (user-uploaded content)
MEDIA_URL = "/media/"  # URL to use when referring to media files
MEDIA_ROOT = os.path.join(BASE_DIR, "media")  # Absolute filesystem path to store media

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = (
    "django.db.models.BigAutoField"  # Use 64-bit integers for primary keys
)

# Email Configuration for password reset and notifications
# All values loaded from environment variables for security
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")  # Email backend to use
EMAIL_HOST = os.getenv("EMAIL_HOST")  # SMTP server hostname
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))  # SMTP server port
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS") == "True"  # Whether to use TLS encryption
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")  # SMTP authentication username
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")  # SMTP authentication password

# Password Reset Settings
PASSWORD_RESET_TIMEOUT = int(
    os.getenv("PASSWORD_RESET_TIMEOUT", 3600)
)  # Link expiry in seconds

# Telegram Bot settings for notifications
# Used to send face recognition alerts to a Telegram channel
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "")  # Bot API token
TELEGRAM_CHANNEL_ID = os.environ.get(
    "TELEGRAM_CHANNEL_ID", ""
)  # Channel to send messages to

# Django Extensions Graph Models settings
# For generating visualization of models
GRAPH_MODELS = {
    "all_applications": True,  # Include all applications in generated graph
    "group_models": True,  # Group models in same app together
}
